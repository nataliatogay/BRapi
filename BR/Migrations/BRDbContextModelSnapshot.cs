// <auto-generated />
using System;
using BR.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BR.Migrations
{
    [DbContext(typeof(BRDbContext))]
    partial class BRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BR.Models.AccountToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Expires");

                    b.Property<string>("IdentityUserId")
                        .IsRequired();

                    b.Property<string>("NotificationTag")
                        .IsRequired();

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("AccountTokens");
                });

            modelBuilder.Entity("BR.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityId");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BR.Models.AdminNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool?>("Done");

                    b.Property<int>("NotificationTypeId");

                    b.Property<int?>("RequestId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasFilter("[ClientId] IS NOT NULL");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("AdminNotifications");
                });

            modelBuilder.Entity("BR.Models.Bar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HallId");

                    b.Property<int>("MaxGuestCount");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Bars");
                });

            modelBuilder.Entity("BR.Models.BarReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedByIdentityId")
                        .IsRequired();

                    b.Property<int>("BarId");

                    b.Property<int?>("BarReservationRequestId");

                    b.Property<int?>("CancelReasonId");

                    b.Property<string>("CancelledByIdentityId");

                    b.Property<int>("ClientId");

                    b.Property<string>("Comments");

                    b.Property<int>("Duration");

                    b.Property<int>("GuestCount");

                    b.Property<string>("IdentityUserId");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int?>("ReservationStateId");

                    b.HasKey("Id");

                    b.HasIndex("AddedByIdentityId");

                    b.HasIndex("BarId");

                    b.HasIndex("BarReservationRequestId")
                        .IsUnique()
                        .HasFilter("[BarReservationRequestId] IS NOT NULL");

                    b.HasIndex("CancelReasonId");

                    b.HasIndex("CancelledByIdentityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("ReservationStateId");

                    b.ToTable("BarReservations");
                });

            modelBuilder.Entity("BR.Models.BarReservationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarId");

                    b.Property<string>("Comments");

                    b.Property<int>("Duration");

                    b.Property<int>("GuestCount");

                    b.Property<string>("RequestedByIdentityId")
                        .IsRequired();

                    b.Property<DateTime>("ReservationDateTime");

                    b.Property<int?>("ReservationRequestStateId");

                    b.Property<string>("ReviewedByIndentityId");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.HasIndex("RequestedByIdentityId");

                    b.HasIndex("ReservationRequestStateId");

                    b.HasIndex("ReviewedByIndentityId");

                    b.ToTable("BarReservationRequests");
                });

            modelBuilder.Entity("BR.Models.CancelReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("CancelReasons");
                });

            modelBuilder.Entity("BR.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarReserveDurationAvg");

                    b.Property<DateTime?>("Blocked");

                    b.Property<int>("CloseTime");

                    b.Property<int>("ConfirmationDuration");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("IdentityId");

                    b.Property<bool>("IsConfirmedByAdmin");

                    b.Property<double>("Lat");

                    b.Property<double>("Long");

                    b.Property<string>("MainImagePath")
                        .IsRequired();

                    b.Property<int>("MaxReserveDays");

                    b.Property<int>("OpenTime");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("PriceCategory");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("ReserveDurationAvg");

                    b.Property<string>("RestaurantName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BR.Models.ClientClientType", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("ClientTypeId");

                    b.HasKey("ClientId", "ClientTypeId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("ClientClientTypes");
                });

            modelBuilder.Entity("BR.Models.ClientCuisine", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("CuisineId");

                    b.HasKey("ClientId", "CuisineId");

                    b.HasIndex("CuisineId");

                    b.ToTable("ClientCuisines");
                });

            modelBuilder.Entity("BR.Models.ClientDish", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("DishId");

                    b.HasKey("ClientId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("ClientDishes");
                });

            modelBuilder.Entity("BR.Models.ClientFavourite", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ClientId");

                    b.HasKey("UserId", "ClientId");

                    b.HasAlternateKey("ClientId", "UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("BR.Models.ClientFeature", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("FeatureId");

                    b.HasKey("ClientId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ClientFeatures");
                });

            modelBuilder.Entity("BR.Models.ClientGoodFor", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("GoodForId");

                    b.HasKey("ClientId", "GoodForId");

                    b.HasIndex("GoodForId");

                    b.ToTable("ClientGoodFors");
                });

            modelBuilder.Entity("BR.Models.ClientImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("ImagePath");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientImages");
                });

            modelBuilder.Entity("BR.Models.ClientMealType", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("MealTypeId");

                    b.HasKey("ClientId", "MealTypeId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("ClientMealTypes");
                });

            modelBuilder.Entity("BR.Models.ClientPhone", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<string>("Number");

                    b.Property<bool>("IsWhatsApp");

                    b.HasKey("ClientId", "Number");

                    b.ToTable("ClientPhones");
                });

            modelBuilder.Entity("BR.Models.ClientRating", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ClientId");

                    b.Property<int>("Rating");

                    b.HasKey("UserId", "ClientId");

                    b.HasAlternateKey("ClientId", "UserId");

                    b.ToTable("ClientRatings");
                });

            modelBuilder.Entity("BR.Models.ClientRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("OrganizationName")
                        .IsRequired();

                    b.Property<int?>("OwnerId");

                    b.Property<string>("OwnerName")
                        .IsRequired();

                    b.Property<string>("OwnerPhoneNumber")
                        .IsRequired();

                    b.Property<DateTime>("RegisteredDate");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("BR.Models.ClientSpecialDiet", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("SpecialDietId");

                    b.HasKey("ClientId", "SpecialDietId");

                    b.HasIndex("SpecialDietId");

                    b.ToTable("ClientSpecialDiets");
                });

            modelBuilder.Entity("BR.Models.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("BR.Models.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("BR.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("BR.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedByIdentityId");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<int>("EntranceFee");

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddedByIdentityId");

                    b.HasIndex("ClientId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BR.Models.EventMark", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("EventId");

                    b.HasKey("UserId", "EventId");

                    b.HasAlternateKey("EventId", "UserId");

                    b.ToTable("EventMarks");
                });

            modelBuilder.Entity("BR.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Features");
                });

            modelBuilder.Entity("BR.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("BR.Models.GoodFor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("GoodFors");
                });

            modelBuilder.Entity("BR.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FloorId");

                    b.Property<string>("JsonInfo")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("BR.Models.Invitee", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReservationId");

                    b.Property<int?>("BarReservationId");

                    b.HasKey("UserId", "ReservationId");

                    b.HasAlternateKey("ReservationId", "UserId");

                    b.HasIndex("BarReservationId");

                    b.ToTable("Invitees");
                });

            modelBuilder.Entity("BR.Models.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("BR.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BR.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("BR.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LogoPath");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BR.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("BR.Models.PhotoPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HallId");

                    b.Property<string>("ImagePath")
                        .IsRequired();

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("PhotoPoints");
                });

            modelBuilder.Entity("BR.Models.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityRoleId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("IdentityRoleId");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("BR.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedByIdentityId")
                        .IsRequired();

                    b.Property<int?>("CancelReasonId");

                    b.Property<string>("CancelledByIdentityId");

                    b.Property<bool>("ChildFree");

                    b.Property<int>("ClientId");

                    b.Property<string>("Comments");

                    b.Property<int>("Duration");

                    b.Property<int>("GuestCount");

                    b.Property<string>("IdentityUserId");

                    b.Property<bool>("Invalids");

                    b.Property<bool>("PetsFree");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int?>("ReservationRequestId");

                    b.Property<int?>("ReservationStateId");

                    b.Property<int>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("AddedByIdentityId");

                    b.HasIndex("CancelReasonId");

                    b.HasIndex("CancelledByIdentityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("ReservationRequestId")
                        .IsUnique()
                        .HasFilter("[ReservationRequestId] IS NOT NULL");

                    b.HasIndex("ReservationStateId");

                    b.HasIndex("TableId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BR.Models.ReservationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ChildFree");

                    b.Property<string>("Comments");

                    b.Property<int>("Duration");

                    b.Property<int>("GuestCount");

                    b.Property<bool>("Invalids");

                    b.Property<string>("InviteeIds");

                    b.Property<DateTime>("IssueDate");

                    b.Property<bool>("PetsFree");

                    b.Property<string>("RequestedByIdentityId")
                        .IsRequired();

                    b.Property<DateTime>("ReservationDateTime");

                    b.Property<int?>("ReservationRequestStateId");

                    b.Property<string>("ReviewedByIndentityId");

                    b.Property<int>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("RequestedByIdentityId");

                    b.HasIndex("ReservationRequestStateId");

                    b.HasIndex("ReviewedByIndentityId");

                    b.HasIndex("TableId");

                    b.ToTable("ReservationRequests");
                });

            modelBuilder.Entity("BR.Models.ReservationRequestState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("ReservationRequestStates");
                });

            modelBuilder.Entity("BR.Models.ReservationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ReservationStates");
                });

            modelBuilder.Entity("BR.Models.SocialLink", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<string>("Link");

                    b.HasKey("ClientId", "Link");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("BR.Models.SpecialDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("SpecialDiets");
                });

            modelBuilder.Entity("BR.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HallId");

                    b.Property<int>("MaxGuests");

                    b.Property<int>("MinGuests");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("BR.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime?>("Blocked");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("Gender");

                    b.Property<string>("IdentityId");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("NotificationTime");

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("BR.Models.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number");

                    b.HasKey("Id");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("BR.Models.UserPrivileges", b =>
                {
                    b.Property<int>("PrivilegeId");

                    b.Property<string>("IdentityId");

                    b.HasKey("PrivilegeId", "IdentityId");

                    b.HasAlternateKey("IdentityId", "PrivilegeId");

                    b.ToTable("UserPrivileges");
                });

            modelBuilder.Entity("BR.Models.UserUserPhone", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("UserPhoneId");

                    b.HasKey("UserId", "UserPhoneId");

                    b.HasIndex("UserPhoneId");

                    b.ToTable("UserUserPhones");
                });

            modelBuilder.Entity("BR.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedByIdentityId");

                    b.Property<int?>("BarId");

                    b.Property<int>("Duration");

                    b.Property<int>("GuestCount");

                    b.Property<bool>("IsCompleted");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int?>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("AddedByIdentityId");

                    b.HasIndex("BarId");

                    b.HasIndex("TableId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("BR.Models.Waiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("Gender");

                    b.Property<string>("IdentityId")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IdentityId");

                    b.ToTable("Waiters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BR.Models.AccountToken", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Admin", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });

            modelBuilder.Entity("BR.Models.AdminNotification", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithOne("AdminNotification")
                        .HasForeignKey("BR.Models.AdminNotification", "ClientId");

                    b.HasOne("BR.Models.NotificationType", "NotificationType")
                        .WithMany("AdminNotifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.ClientRequest", "Request")
                        .WithOne("AdminNotification")
                        .HasForeignKey("BR.Models.AdminNotification", "RequestId");
                });

            modelBuilder.Entity("BR.Models.Bar", b =>
                {
                    b.HasOne("BR.Models.Hall", "Hall")
                        .WithMany("Bars")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.BarReservation", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AddedByIdentity")
                        .WithMany()
                        .HasForeignKey("AddedByIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Bar", "Bar")
                        .WithMany("BarReservations")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.BarReservationRequest", "BarReservationRequest")
                        .WithOne("BarReservation")
                        .HasForeignKey("BR.Models.BarReservation", "BarReservationRequestId");

                    b.HasOne("BR.Models.CancelReason", "CancelReason")
                        .WithMany("BarReservations")
                        .HasForeignKey("CancelReasonId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CancelledByIdentity")
                        .WithMany()
                        .HasForeignKey("CancelledByIdentityId");

                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("BarReservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("BR.Models.ReservationState", "ReservationState")
                        .WithMany("BarReservations")
                        .HasForeignKey("ReservationStateId");
                });

            modelBuilder.Entity("BR.Models.BarReservationRequest", b =>
                {
                    b.HasOne("BR.Models.Bar", "Bar")
                        .WithMany("BarReservationRequests")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "RequestedByIdentityUser")
                        .WithMany()
                        .HasForeignKey("RequestedByIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.ReservationRequestState", "ReservationRequestState")
                        .WithMany("BarReservationRequests")
                        .HasForeignKey("ReservationRequestStateId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ReviewedByIdentityUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByIndentityId");
                });

            modelBuilder.Entity("BR.Models.CancelReason", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("BR.Models.Client", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("BR.Models.Organization", "Organization")
                        .WithMany("Clients")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.ClientClientType", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientClientTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.ClientType", "ClientType")
                        .WithMany("ClientClientTypes")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.ClientCuisine", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientCuisines")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Cuisine", "Cuisine")
                        .WithMany("ClientCuisines")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.ClientDish", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientDishes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Dish", "Dish")
                        .WithMany("ClientDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientFavourite", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientFavourites")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany("ClientFavourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientFeature", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientFeatures")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Feature", "Feature")
                        .WithMany("ClientFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientGoodFor", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientGoodFors")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.GoodFor", "GoodFor")
                        .WithMany("ClientGoodFors")
                        .HasForeignKey("GoodForId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientImage", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientImages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientMealType", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientMealTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.MealType", "MealType")
                        .WithMany("ClientMealTypes")
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.ClientPhone", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientPhones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientRating", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientRatings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany("ClientRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientRequest", b =>
                {
                    b.HasOne("BR.Models.Owner", "Owner")
                        .WithOne("ClientRequest")
                        .HasForeignKey("BR.Models.ClientRequest", "OwnerId");
                });

            modelBuilder.Entity("BR.Models.ClientSpecialDiet", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientSpecialDiets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.SpecialDiet", "SpecialDiet")
                        .WithMany("ClientSpecialDiets")
                        .HasForeignKey("SpecialDietId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Event", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AddedByIdentity")
                        .WithMany()
                        .HasForeignKey("AddedByIdentityId");

                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Events")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.EventMark", b =>
                {
                    b.HasOne("BR.Models.Event", "Event")
                        .WithMany("EventMarks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany("EventMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Floor", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Floors")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Hall", b =>
                {
                    b.HasOne("BR.Models.Floor", "Floor")
                        .WithMany("Halls")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Invitee", b =>
                {
                    b.HasOne("BR.Models.BarReservation")
                        .WithMany("Invitees")
                        .HasForeignKey("BarReservationId");

                    b.HasOne("BR.Models.Reservation", "Reservation")
                        .WithMany("Invitees")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany("Invitees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.News", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("News")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Owner", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");

                    b.HasOne("BR.Models.Organization", "Organization")
                        .WithMany("Owners")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BR.Models.PhotoPoint", b =>
                {
                    b.HasOne("BR.Models.Hall", "Hall")
                        .WithMany("PhotoPoints")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Privilege", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "IdentityRole")
                        .WithMany()
                        .HasForeignKey("IdentityRoleId");
                });

            modelBuilder.Entity("BR.Models.Reservation", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AddedByIdentity")
                        .WithMany()
                        .HasForeignKey("AddedByIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.CancelReason", "CancelReason")
                        .WithMany("Reservations")
                        .HasForeignKey("CancelReasonId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CancelledByIdentity")
                        .WithMany()
                        .HasForeignKey("CancelledByIdentityId");

                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.HasOne("BR.Models.ReservationRequest", "ReservationRequest")
                        .WithOne("Reservation")
                        .HasForeignKey("BR.Models.Reservation", "ReservationRequestId");

                    b.HasOne("BR.Models.ReservationState", "ReservationState")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationStateId");

                    b.HasOne("BR.Models.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ReservationRequest", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "RequestedByIdentityUser")
                        .WithMany()
                        .HasForeignKey("RequestedByIdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.ReservationRequestState", "ReservationRequestState")
                        .WithMany("ReservationRequests")
                        .HasForeignKey("ReservationRequestStateId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ReviewedByIdentityUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByIndentityId");

                    b.HasOne("BR.Models.Table", "Table")
                        .WithMany("ReservationRequests")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.SocialLink", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("SocialLinks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Table", b =>
                {
                    b.HasOne("BR.Models.Hall", "Hall")
                        .WithMany("Tables")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });

            modelBuilder.Entity("BR.Models.UserPrivileges", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Privilege", "Privilege")
                        .WithMany("UserPrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.UserUserPhone", b =>
                {
                    b.HasOne("BR.Models.User", "User")
                        .WithMany("UserUserPhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.UserPhone", "UserPhone")
                        .WithMany("UserUserPhones")
                        .HasForeignKey("UserPhoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Visitor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AddedByIdentity")
                        .WithMany()
                        .HasForeignKey("AddedByIdentityId");

                    b.HasOne("BR.Models.Bar", "Bar")
                        .WithMany()
                        .HasForeignKey("BarId");

                    b.HasOne("BR.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");
                });

            modelBuilder.Entity("BR.Models.Waiter", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Waiters")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
