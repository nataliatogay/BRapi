// <auto-generated />
using System;
using BR.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BR.Migrations
{
    [DbContext(typeof(BRDbContext))]
    [Migration("20191021144205_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BR.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BR.Models.AdminAccountToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdminId");

                    b.Property<DateTime>("Expires");

                    b.Property<string>("RefreshToken");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminAccountTokens");
                });

            modelBuilder.Entity("BR.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(250);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("EndTime");

                    b.Property<bool>("IsChildrenZone");

                    b.Property<bool?>("IsLiveMusic");

                    b.Property<bool>("IsOpenSpace");

                    b.Property<bool>("IsPasking");

                    b.Property<bool>("IsWiFi");

                    b.Property<float>("Latitude");

                    b.Property<float>("Longitude");

                    b.Property<string>("MainImagePath")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("MaxReservDays");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("StartTime");

                    b.Property<int>("ToBeClientId");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BR.Models.ClientClientType", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("ClientTypeId");

                    b.HasKey("ClientId", "ClientTypeId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("ClientClientTypes");
                });

            modelBuilder.Entity("BR.Models.ClientCuisine", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("CuisineId");

                    b.HasKey("ClientId", "CuisineId");

                    b.HasIndex("CuisineId");

                    b.ToTable("ClientCuisines");
                });

            modelBuilder.Entity("BR.Models.ClientPaymentType", b =>
                {
                    b.Property<int>("ClientId");

                    b.Property<int>("PaymentTypeId");

                    b.HasKey("ClientId", "PaymentTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("ClientPaymentTypes");
                });

            modelBuilder.Entity("BR.Models.ClientPhone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("PhoneCodeId");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("ClientId");

                    b.HasIndex("PhoneCodeId");

                    b.ToTable("ClientPhones");
                });

            modelBuilder.Entity("BR.Models.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("BR.Models.Cuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("BR.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("Number");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("BR.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FloorId");

                    b.Property<string>("JsonInfo");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("BR.Models.Invitee", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReservationId");

                    b.HasKey("UserId", "ReservationId");

                    b.HasAlternateKey("ReservationId", "UserId");

                    b.ToTable("Invitees");
                });

            modelBuilder.Entity("BR.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Description");

                    b.Property<string>("ImagePath");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BR.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("BR.Models.PhoneCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code");

                    b.Property<string>("Country")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PhoneCodes");
                });

            modelBuilder.Entity("BR.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChildFree");

                    b.Property<int>("GuestCount");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int>("ReservationStateId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReservationStateId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BR.Models.ReservationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ReservationStates");
                });

            modelBuilder.Entity("BR.Models.SocialLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("Link");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("BR.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("MaxGuests");

                    b.Property<int>("MinGuests");

                    b.Property<int>("Number");

                    b.Property<int?>("ReservationId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("BR.Models.ToBeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<string>("JsonInfo")
                        .IsRequired();

                    b.Property<DateTime>("RegisteredDate");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ToBeClient");
                });

            modelBuilder.Entity("BR.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool?>("Gender");

                    b.Property<string>("ImagePath");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<int>("PhoneCodeId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("PhoneCodeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BR.Models.AdminAccountToken", b =>
                {
                    b.HasOne("BR.Models.Admin", "Admin")
                        .WithMany("AdminAccountTokens")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientClientType", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientClientTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.ClientType", "ClientType")
                        .WithMany("ClientClientTypes")
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientCuisine", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientCuisines")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Cuisine", "Cuisine")
                        .WithMany("ClientCuisines")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientPaymentType", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientPaymentTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.PaymentType", "PaymentType")
                        .WithMany("ClientPaymentTypes")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.ClientPhone", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("ClientPhones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.PhoneCode", "PhoneCode")
                        .WithMany("ClientPhones")
                        .HasForeignKey("PhoneCodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Floor", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Floors")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Hall", b =>
                {
                    b.HasOne("BR.Models.Floor", "Floor")
                        .WithMany("Halls")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Invitee", b =>
                {
                    b.HasOne("BR.Models.Reservation", "Reservation")
                        .WithMany("Invitees")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.News", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("News")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Reservation", b =>
                {
                    b.HasOne("BR.Models.ReservationState", "ReservationState")
                        .WithMany()
                        .HasForeignKey("ReservationStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.SocialLink", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("SocialLinks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BR.Models.Table", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithMany("Tables")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BR.Models.Reservation", "Reservation")
                        .WithMany("Tables")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("BR.Models.ToBeClient", b =>
                {
                    b.HasOne("BR.Models.Client", "Client")
                        .WithOne("ToBeClient")
                        .HasForeignKey("BR.Models.ToBeClient", "ClientId");
                });

            modelBuilder.Entity("BR.Models.User", b =>
                {
                    b.HasOne("BR.Models.PhoneCode", "PhoneCode")
                        .WithMany("Users")
                        .HasForeignKey("PhoneCodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
